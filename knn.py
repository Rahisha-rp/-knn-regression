# -*- coding: utf-8 -*-
"""knn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xWHs6SnAeWGKxzrjEyI7xxslvPkGom0W
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load Dataset
from sklearn.datasets import load_diabetes
data = load_diabetes()

dataset = pd.DataFrame(data.data, columns=data.feature_names)
dataset.shape

dataset.head()

X = data.data
X

y = data.target
print(y)

# Split the dataset for 70% training and 30% testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# KNN Regression (K=5)
knn = KNeighborsRegressor(n_neighbors=5)

knn.fit(X_train, y_train)

# To make predictions on the test dataset
y_pred = knn.predict(X_test)

# Calculation of MSE
mse = mean_squared_error(y_test, y_pred)
mse

# Calculation of RÂ² score
r2 = r2_score(y_test, y_pred)
r2

# Calculatuon of Residual Plot
plt.figure(figsize=(6,4))
plt.scatter(y_test, y_test - y_pred, color='blue', alpha=0.5)
plt.axhline(y=0, color='black', linestyle='--')
plt.xlabel("Actual Values")
plt.ylabel("Residual (Error)")
plt.title("Residual Plot")
plt.show()

# Predicted vs Actual plot
plt.figure(figsize=(6,4))
plt.scatter(y_test, y_pred, color='green', alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle='--', color='black')
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Predicted vs Actual Values")
plt.show()

# Perform K-fold (k=5) cross validation to test the model's generalization
k_fold_scores = cross_val_score(knn, X, y, cv=5, scoring='r2')

print("Accuracy in each fold:", k_fold_scores)

print("Average accuracy:", {np.mean(k_fold_scores)})

# Calculation of Root Mean Squared Error (RMSE) plot
rmse = np.sqrt(mse)
plt.bar(["RMSE"], [rmse], color='red')
plt.title("Root Mean Squared Error")
plt.ylabel("Error Value")
plt.show()

# Display sample feature and target
sample_index = 0
print("Feature names:", data.feature_names)
print("Sample features:", X[sample_index])
print("Sample target (Diabetes Progression):", y[sample_index])